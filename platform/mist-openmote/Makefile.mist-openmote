
SMALL=0

OPENMOTEDIR=$(MIST)/contiki/platform/openmote
MISTOPENMOTEDIR=$(MIST)/platform/mist-openmote

ifdef IAR
else

CONTIKI_TARGET_SOURCEFILES = contiki-mist-openmote-main.c
CONTIKI_TARGET_SOURCEFILES += node-id.c
CONTIKI_TARGET_SOURCEFILES += startup-gcc-mist-openmote.c flash.c

endif

ifdef ID
LDSCRIPT = cc2538-mist-id.ld

.PHONY: cc2538-mist-id.ld
endif # ID

include $(OPENMOTEDIR)/Makefile.openmote

cc2538-mist-id.ld: $(MISTOPENMOTEDIR)/cc2538-mist-id.lds
	$(CPP) -DID=$(ID) -P -E $< -o $@

CONTIKI_TARGET_SOURCEFILES+=sht21.c ds18b20.c

CLEAN += *.bin *.mist-openmote

ifdef NODEID
CFLAGS+=-DNODEID=$(NODEID)

ifdef BURN_NODEID
CFLAGS+=-DBURN_NODEID
endif # BURN_NODEID
endif # NODEID

ifdef UIP_CONF_IPV6
CFLAGS += -DWITH_UIP6=1
endif

PLATFORMAPPS += simple-rpl aes sht21 ds18b20

vpath %.c $(OPENMOTEDIR)
vpath %.c $(OPENMOTEDIR)/dev


CFLAGS += -I $(OPENMOTEDIR) -I $(OPENMOTEDIR)/dev -DPLATFORM_CONF=\"platform-conf.h\"

#-------------------------------------------------------------------------------
# print target usage
help:
	@echo Useful commands:
	@echo "Store target"
	@echo "   make TARGET=openmote savetarget"
	@echo "Compile into binary format"
	@echo "   make myapp.bin"
	@echo "Compile and upload to an OpenMote node"
	@echo "   make myapp.upload"
	@echo "Upload a pre-compiled binary (named myapp.bin) to an OpenMote node"
	@echo "   make myapp.prebin-upload"
	@echo "Erase mcu flash"
	@echo "   make erase"

# find folders so we can jump to the programmer tool folder and back, needed
# for the programmer tool and works only in Cygwin (the tool is a Windows tool)
# Further, the tool must be in the search path
ifndef PROGRAMMER
PROGRAMMER=ArmProgConsole.exe
endif
ifndef PROGRAMMER_PATH
CURRENT_PROJ_DIR=$(shell 'pwd')
PROGRAMMER_BIN_PATH := $(shell dirname "`which $(PROGRAMMER)`")
endif

.PRECIOUS: %.hex
ifdef IAR # ------------------------------------------------------------------
# make elf-file
%.hex: %.elf
	$(OC) $^ --ihex --verbose $@

# make binary-file
%.bin: %.elf
	$(OC) $^ --bin --verbose $@

CUSTOM_RULE_C_TO_OBJECTDIR_O=1
$(OBJECTDIR)/%.o: %.c
	$(CC) $(CFLAGS) $< -o $@
	@$(FINALIZE_DEPENDENCY)

else    # /IAR ------------------------------------------------------------------
# make elf-file
%.hex: %.elf
	$(OC) $^ -Oihex $@

# make binary-file
%.bin: %.elf
	$(OC) $^ -O binary $@

endif   # IAR ------------------------------------------------------------------


# compile and upload a binary firmware to the node
%.upload: %.bin
	@echo "*** Erasing CC2538 memory"
	@cd $(PROGRAMMER_BIN_PATH) ; $(PROGRAMMER) "S(2538)" CE
	@echo ""
	@echo "*** Programming node with the file $<"
	@cd $(CURRENT_PROJ_DIR) ; $(PROGRAMMER) "S(2538)" PB=0x200000 F=$<

# upload a pre-compiled binary firmware (without updating it) to the node
# note: requires the binary to be named .bin
.PHONY: %.prebin-upload
%.prebin-upload:
%.prebin-upload:
	@[ -f $*.bin ] || (echo "Need $*.bin, aborting upload" && false)
	@echo "*** Erasing CC2538 memory"
	@cd $(PROGRAMMER_BIN_PATH) ; $(PROGRAMMER) "S(2538)" CE -V
	@echo ""
	@echo "*** Programming node with the file $*.bin"
	@cd $(CURRENT_PROJ_DIR) ; $(PROGRAMMER) "S(2538)" PB=0x200000 F=$*.bin -V

%.download:
	$(PROGRAMMER) "S(2538)" RB F="$@" -V

# erase the microcontroller flash
erase:
	@echo "*** Erasing CC2538 memory"
	@cd $(PROGRAMMER_BIN_PATH) ; $(PROGRAMMER) "S(2538)" CE


# Serialdump rules
ifeq ($(HOST_OS),Windows)
  SERIALDUMP = serialdump-windows
  
  CYGWIN_DEV_ID="USB Serial Port ("
  include $(CONTIKI)/tools/cygwin/Makefile.cygwin
endif
ifeq ($(HOST_OS),Darwin)
  SERIALDUMP = serialdump-macos
endif
ifndef SERIALDUMP
  # Assume Linux
  SERIALDUMP = serialdump-linux
endif

login:
	@echo "Connecting to $(COMPORT)"
	$(CONTIKI)/tools/sky/$(SERIALDUMP) -b115200 $(COMPORT)

ifdef IDS
%.bins:
	$(foreach id,$(IDS),make TARGET=$(TARGET) ID=$(id) $*.bin ; mv $*.bin $*-$(id).bin ; )
endif #IDS
